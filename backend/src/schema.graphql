type GetMessagesResponse {
  ok: Boolean!
  error: String
  messages: [Message]
}

type Query {
  GetMessages(apiKey: String!): GetMessagesResponse!
  GetProjects: GetProjectsResponse!
  GetTags(projectId: Int!): GetTagsResponse!
  User: String!
}

type SendMessageResponse {
  ok: Boolean!
  error: String
}

input attachTags {
  attachTag: String!
}

type Mutation {
  SendMessage(level: String!, contents: String!, fileName: String, apiKey: String!, tags: [attachTags]): SendMessageResponse!
  CreateProject(projectName: String!): CreateProjectResponse!
  CreateTag(projectId: Int!, name: String!, color: String): CreateTagResponse!
  SignIn(userEmail: String!, userName: String!): SignInResponse!
}

type Subscription {
  SendMessageSubscription: Message
}

type Message {
  id: Int!
  level: String
  contents: String!
  fileName: String
  project: Project
  projectId: Int
  tags: [Tag]
  createdAt: String!
}

type CreateProjectResponse {
  ok: Boolean!
  error: String
  project: Project
}

type GetProjectsResponse {
  ok: Boolean!
  error: String
  projects: [Project]
}

type Project {
  id: Int!
  name: String!
  participants: [User]!
  admin: User
  messages: [Message]
  tags: [Tag]
  apiKey: String!
  createdAt: String!
  updatedAt: String
}

type CreateTagResponse {
  ok: Boolean!
  error: String
  tag: Tag
}

type GetTagsResponse {
  ok: Boolean!
  error: String
  tags: [Tag]
}

type Tag {
  id: Int!
  name: String!
  color: String
  project: Project!
  projectId: Int
  createdAt: String!
  updatedAt: String
}

type User {
  id: Int!
  userName: String!
  userEmail: String!
  innerProjects: [Project]
  manages: [Project]
  createdAt: String!
  updatedAt: String
}

type SignInResponse {
  ok: Boolean!
  error: String
  token: String
}
