type GetFrequencyLevelsResponse {
  ok: Boolean!
  error: String
  frequencyLevels: [LevelOption]
}

type LevelOption {
  notice: String!
  debug: String!
  warning: String!
  danger: String!
  date: String!
}

type Query {
  GetFrequencyLevels(projectId: Int!): GetFrequencyLevelsResponse!
  GetMessage(projectId: Int!, messageId: Int!): GetMessageResponse!
  GetMessages(projectId: Int!): GetMessagesResponse!
  GetProject(projectId: Int!): GetProjectResponse!
  GetProjects: GetProjectsResponse!
  GetTags(projectId: Int!): GetTagsResponse!
  GetProfile: GetProfileResponse!
  User: String!
}

type GetMessageResponse {
  ok: Boolean!
  error: String
  message: Message
  msgCount: Int!
  similarMsg: [Message]
}

type GetMessagesResponse {
  ok: Boolean!
  error: String
  messages: [Message]
}

type SendMessageResponse {
  ok: Boolean!
  error: String
}

input attachTags {
  name: String!
  color: String
}

enum levelOption {
  NOTICE
  WARNING
  DEBUG
  DANGER
}

type Mutation {
  SendMessage(level: levelOption!, contents: String!, location: String, apiKey: String!, tags: [attachTags]): SendMessageResponse!
  CreateProject(projectName: String!, description: String, thumbnail: String): CreateProjectResponse!
  CreateTag(projectId: Int!, name: String!, color: String): CreateTagResponse!
  SignIn(userEmail: String!, userName: String!, profileImage: String): SignInResponse!
}

type Subscription {
  SendMessageSubscription: Message
  CreateTagSubscription: Tag
}

type Message {
  id: Int!
  level: String
  contents: String!
  location: String
  project: Project
  projectId: Int
  tags: [Tag]
  createdAt: String!
}

type CreateProjectResponse {
  ok: Boolean!
  error: String
  project: Project
}

type GetProjectResponse {
  ok: Boolean!
  error: String
  project: Project
}

type GetProjectsResponse {
  ok: Boolean!
  error: String
  projects: [Project]
}

type Project {
  id: Int!
  name: String!
  thumbnail: String
  description: String
  participants: [User]!
  admin: User
  messages: [Message]
  tags: [Tag]
  apiKey: String!
  createdAt: String!
  updatedAt: String
}

type CreateTagResponse {
  ok: Boolean!
  error: String
  tag: Tag
}

type GetTagsResponse {
  ok: Boolean!
  error: String
  tags: [Tag]
}

type Tag {
  id: Int!
  name: String!
  color: String
  project: Project!
  projectId: Int
  createdAt: String!
  updatedAt: String
}

type GetProfileResponse {
  ok: Boolean!
  error: String
  user: User
}

type User {
  id: Int!
  userName: String!
  userEmail: String!
  profileImage: String
  innerProjects: [Project]
  manages: [Project]
  createdAt: String!
  updatedAt: String
}

type SignInResponse {
  ok: Boolean!
  error: String
  token: String
}
